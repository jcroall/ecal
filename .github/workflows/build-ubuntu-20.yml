name: Build Ubuntu 20.04

on:
  #push:
  #pull_request:
  #  branches:
  #    - master
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-20.04

    steps:
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt-get install ninja-build doxygen graphviz libcurl4-openssl-dev libprotobuf-dev libprotoc-dev protobuf-compiler libhdf5-dev qt5-default

    - name: Install Capâ€™n Proto
      run: |
        mkdir "${{ runner.workspace }}/capnp"
        cd "${{ runner.workspace }}/capnp"
        curl -O https://capnproto.org/capnproto-c++-0.9.0.tar.gz
        tar zxf capnproto-c++-0.9.0.tar.gz
        cd capnproto-c++-0.9.0
        ./configure
        make -j
        sudo make install

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules:  'true'
        fetch-depth: 0
        
    - name: Install Python requirements
      shell: bash
      run: |
        sudo pip3 install -r "$GITHUB_WORKSPACE/requirements.txt"

    - name: Install Black Duck C/C++ Scanner
      shell: bash
      run: |
        sudo pip uninstall protobuf python3-protobuf
        sudo pip install --upgrade pip
        sudo pip install --upgrade protobuf
        sudo pip3 install blackduck-c-cpp

    - name: CMake
      run: |
        export CC=/usr/bin/gcc-9
        export CXX=/usr/bin/g++-9
        mkdir "${{ runner.workspace }}/_build"
        cd "${{ runner.workspace }}/_build"
        cmake $GITHUB_WORKSPACE -G "Ninja" \
        -DHAS_HDF5=ON \
        -DHAS_QT5=ON \
        -DHAS_CURL=ON \
        -DHAS_CAPNPROTO=ON \
        -DBUILD_DOCS=ON \
        -DBUILD_APPS=ON \
        -DBUILD_SAMPLES=ON \
        -DBUILD_TIME=ON \
        -DBUILD_PY_BINDING=ON \
        -DBUILD_STANDALONE_PY_WHEEL=ON \
        -DBUILD_CSHARP_BINDING=OFF \
        -DBUILD_ECAL_TESTS=ON \
        -DECAL_LAYER_ICEORYX=OFF \
        -DECAL_INCLUDE_PY_SAMPLES=OFF \
        -DECAL_INSTALL_SAMPLE_SOURCES=ON \
        -DECAL_JOIN_MULTICAST_TWICE=OFF \
        -DECAL_NPCAP_SUPPORT=OFF \
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF \
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON \
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON \
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON \
        -DECAL_THIRDPARTY_BUILD_CURL=OFF \
        -DECAL_THIRDPARTY_BUILD_GTEST=ON \
        -DECAL_THIRDPARTY_BUILD_HDF5=OFF \
        -DECAL_THIRDPARTY_BUILD_RECYCLE=ON \
        -DECAL_THIRDPARTY_BUILD_TCPUB=ON \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_SYSCONFDIR=/etc \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LOCALSTATEDIR=/var \
        -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu
        sudo mkdir /etc/ecal
        sudo cp "$GITHUB_WORKSPACE/ecal/core/cfg/ecal.ini" /etc/ecal
      shell: bash

    - name: Build Release
      run: |
        blackduck-c-cpp --build_cmd 'cmake --build . --config Release' \
        --build_dir . \
        --project_name ecal \
        --project_version 7.1 \
        --bd_url ${{ secrets.BLACKDUCK_URL }} \
        --api_token ${{ secrets.BLACKDUCK_API_TOKEN }} \
        --insecure false
      working-directory: ${{ runner.workspace }}/_build

    - name: Build Python Wheel
      run: cmake --build . --target create_python_wheel --config Release
      working-directory: ${{ runner.workspace }}/_build

    #- name: Run Tests
    #  run: ctest -V
    #  working-directory: ${{ runner.workspace }}/_build

    #- name: Pack
    #  run: cpack -G DEB
    #  working-directory: ${{ runner.workspace }}/_build

    #- name: Upload Debian
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: ubuntu-debian
    #    path: ${{ runner.workspace }}/_build/_deploy/*.deb

    #- name: Upload Python Wheel
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: ubuntu-python-wheel
    #    path: ${{ runner.workspace }}/_build/_deploy/*.whl


